{"version":3,"sources":["mapStateToProps.js","mapDispatchToProps.js","Actions/index.js","Components/Weather.js","Components/SearchCity.js","Reducers/index.js","Store/index.js","Components/HourWeather.js","Components/DayWeather.js","App.js","serviceWorker.js","index.js"],"names":["mapStateToProps","state","Object","objectSpread","mapDispatchToProps","getCity","e","type","payload","target","value","getWeather","response","setCity","Weather","weather","this","props","undefined","react_default","a","createElement","className","lib_default","name","iconId","data","list","id","flip","rotate","Math","floor","main","temp","city","description","React","Component","connect","City","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","inputValue","setState","_this2","axios","get","then","res","console","log","handleGetApi","key","handleInput","_this3","_this$props","placeholder","onChange","onKeyPress","handleKeyPress","io","style","marginBottom","cursor","size","onClick","initialState","reducer","arguments","length","action","store","createStore","applyMiddleware","thunk","HourWeather","count","dt_txt","substring","DayWeather","text","icon","library","add","faGhost","App","weekday","d","Date","react_redux_es","SearchCity","Components_Weather","Components_HourWeather","Components_DayWeather","getDay","i","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9bf2e774.chunk.js","sourcesContent":["export const mapStateToProps = (state) => {\r\n\r\n    return {...state};\r\n};","import * as act from './Actions/index';\r\n\r\nexport const mapDispatchToProps = ({\r\n    getCity: act.getCity,\r\n    getWeather: act.getWeather,\r\n    setCity: act.setCity\r\n});","export const getCity = (e) => ({\r\n    type: 'GET_CITY',\r\n    payload: e.target.value\r\n});\r\n\r\nexport const setCity = () => ({\r\n    type: 'SET_CITY'\r\n});\r\n\r\nexport const getWeather = (response) => ({\r\n    type: 'GET_WEATHER',\r\n    payload: response\r\n});\r\n","import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport {mapStateToProps} from \"../mapStateToProps\";\r\nimport {mapDispatchToProps} from \"../mapDispatchToProps\";\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport WeatherIcon from 'react-icons-weather';\r\nimport weather from \"../Assets/scss/weather.scss\"\r\n\r\nclass Weather extends React.Component {\r\n\r\n\r\n    static propTypes = {\r\n        city: PropTypes.string,\r\n        getWeather: PropTypes.func\r\n    };\r\n\r\n\r\n    render() {\r\n        let count = 0;\r\n        const {weather} = this.props;\r\n        if (this.props.weather !== undefined) {\r\n            return <div>\r\n                <div className=\"today\"><span>Today</span> <WeatherIcon className=\"weather-today\"\r\n                                                                       name=\"owm\"\r\n                                                                       iconId={this.props.weather.data.list[count].weather[count].id}\r\n                                                                       flip=\"horizontal\"\r\n                                                                       rotate=\"90\"/>{Math.floor(this.props.weather.data.list[count].main.temp - 273.15)} &deg;\r\n                </div>\r\n                <div className=\"info\">\r\n                    <span> {weather.data.city.name} </span><br/>\r\n                    <span>{this.props.weather.data.list[count].weather[count].description}</span>\r\n                </div>\r\n            </div>\r\n        }\r\n        else {\r\n            return <div>\r\n                Wpisz miasto\r\n            </div>\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nWeather = connect(mapStateToProps, mapDispatchToProps)(Weather);\r\nexport default Weather;","import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport {getCity} from \"../Actions\";\r\nimport {mapStateToProps} from \"../mapStateToProps\";\r\nimport {mapDispatchToProps} from \"../mapDispatchToProps\";\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport Weather from \"./Weather\";\r\nimport axios from \"axios\";\r\nimport searchCity from \"../Assets/scss/searchCity.scss\"\r\nimport {IoIosSearch} from 'react-icons/io';\r\n\r\n\r\nclass City extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputValue: 'London'\r\n        }\r\n    }\r\n\r\n    static propTypes = {\r\n        city: PropTypes.string,\r\n        cityInput: PropTypes.string,\r\n        getCity: PropTypes.func,\r\n        setCity: PropTypes.func\r\n    };\r\n\r\n    handleInput(e) {\r\n        this.setState({inputValue: e.target.value})\r\n    }\r\n\r\n    handleGetApi() {\r\n        axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=` + this.state.inputValue + `&appid=3b1ebacd50586cc78e3bbbf1a089f683` + `&lang=en`)\r\n            .then(res => {\r\n                this.props.getWeather(res);\r\n                console.log(res);\r\n                console.log(\"State: \", this.props.weather);\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.handleGetApi();\r\n    }\r\n\r\n    handleKeyPress(e) {\r\n        if (e.key == 'Enter') {\r\n            this.handleInput(e);\r\n            this.handleGetApi();\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {city, getCity} = this.props;\r\n        console.log(city);\r\n        return <div className=\"search\">\r\n\r\n            <input placeholder={\"Enter city name \"} type=\"text\" name=\"city\" onChange={(e) => {\r\n                this.handleInput(e)\r\n            }} onKeyPress={(e) => {\r\n                this.handleKeyPress(e)\r\n            }}/>\r\n            <IoIosSearch style={{marginBottom: \"-10px\", cursor: \"pointer\"}} size={\"2em\"} onClick={(e) => {\r\n                this.handleGetApi()\r\n            }}/>\r\n\r\n        </div>\r\n    }\r\n\r\n\r\n}\r\n\r\nCity = connect(mapStateToProps, mapDispatchToProps)(City);\r\nexport default City;","let initialState = {\r\n    city: '',\r\n    weather: ''\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        //GET City name from input\r\n        case 'GET_CITY': {\r\n            return {...state, city: action.payload}\r\n        }\r\n\r\n        case 'GET_WEATHER': {\r\n            return {...state, weather: action.payload}\r\n        }\r\n    }\r\n}\r\n\r\nexport default reducer;","import {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from '../Reducers/index';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {mapStateToProps} from \"../mapStateToProps\";\r\nimport {mapDispatchToProps} from \"../mapDispatchToProps\";\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport WeatherIcon from 'react-icons-weather';\r\nimport hourweather from '../Assets/scss/hourweather.scss';\r\n\r\nclass HourWeather extends React.Component {\r\n\r\n\r\n    static propTypes = {\r\n        city: PropTypes.string,\r\n        getWeather: PropTypes.func\r\n    };\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        let count = 0;\r\n        if (this.props.weather !== undefined) {\r\n            return <div>\r\n                <div className=\"temp\">\r\n                    <span>{Math.floor(this.props.weather.data.list[count].main.temp - 273.15)} &deg;</span>\r\n                    <span>{Math.floor(this.props.weather.data.list[count + 1].main.temp - 273.15)} &deg;</span>\r\n                    <span>{Math.floor(this.props.weather.data.list[count + 2].main.temp - 273.15)} &deg;</span>\r\n                    <span>{Math.floor(this.props.weather.data.list[count + 3].main.temp - 273.15)} &deg;</span>\r\n                </div>\r\n                <div className=\"icon\">\r\n                    <WeatherIcon className=\"weather-today\"\r\n                                 name=\"owm\"\r\n                                 iconId={this.props.weather.data.list[count].weather[count].id}\r\n                                 flip=\"horizontal\"\r\n                                 rotate=\"90\"/>\r\n                    <WeatherIcon className=\"weather-today\"\r\n                                 name=\"owm\"\r\n                                 iconId={this.props.weather.data.list[count + 1].weather[count].id}\r\n                                 flip=\"horizontal\"\r\n                                 rotate=\"90\"/>\r\n                    <WeatherIcon className=\"weather-today\"\r\n                                 name=\"owm\"\r\n                                 iconId={this.props.weather.data.list[count + 2].weather[count].id}\r\n                                 flip=\"horizontal\"\r\n                                 rotate=\"90\"/>\r\n                    <WeatherIcon className=\"weather-today\"\r\n                                 name=\"owm\"\r\n                                 iconId={this.props.weather.data.list[count + 3].weather[count].id}\r\n                                 flip=\"horizontal\"\r\n                                 rotate=\"90\"/>\r\n\r\n                </div>\r\n                <div className=\"hour\">\r\n                    <span> {this.props.weather.data.list[count].dt_txt.substring(11, 16)} </span>\r\n                    <span>   {this.props.weather.data.list[count + 1].dt_txt.substring(11, 16)} </span>\r\n                    <span>{this.props.weather.data.list[count + 2].dt_txt.substring(11, 16)}</span>\r\n                    <span>{this.props.weather.data.list[count + 3].dt_txt.substring(11, 16)}</span>\r\n                </div>\r\n            </div>\r\n\r\n        }\r\n        else {\r\n            return null\r\n        }\r\n    }\r\n}\r\n\r\nHourWeather = connect(mapStateToProps, mapDispatchToProps)(HourWeather);\r\nexport default HourWeather;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {mapStateToProps} from \"../mapStateToProps\";\r\nimport {mapDispatchToProps} from \"../mapDispatchToProps\";\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport WeatherIcon from 'react-icons-weather';\r\nimport day_weather from '../Assets/scss/day_weather.scss'\r\n\r\nclass DayWeather extends React.Component {\r\n\r\n\r\n    static propTypes = {\r\n        city: PropTypes.string,\r\n        getWeather: PropTypes.func\r\n    };\r\n\r\n\r\n    render() {\r\n        let count = 0;\r\n        const {weather} = this.props;\r\n        if (this.props.weather !== undefined) {\r\n            return <div className=\"day\">\r\n                <div className=\"text\">{this.props.text}</div>\r\n                <div className=\"rest\">\r\n                <span>{<WeatherIcon className=\"weather-today\"\r\n                                    name=\"owm\"\r\n                                    iconId={this.props.weather.data.list[this.props.icon].weather[0].id}\r\n                                    flip=\"horizontal\"\r\n                                    rotate=\"90\"/>}</span>\r\n                    <span>{Math.floor(this.props.weather.data.list[this.props.icon].main.temp - 273.15)} &deg;</span>\r\n                </div>\r\n            </div>\r\n\r\n        }\r\n        else {\r\n            return null\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nDayWeather = connect(mapStateToProps, mapDispatchToProps)(DayWeather);\r\nexport default DayWeather;","import React, {Component} from 'react';\nimport './App.css';\nimport City from \"./Components/SearchCity\";\nimport store from \"./Store\";\nimport {Provider} from 'react-redux';\nimport Weather from \"./Components/Weather\";\nimport HourWeather from \"./Components/HourWeather\";\nimport './Assets/scss/style.scss'\nimport DayWeather from \"./Components/DayWeather\";\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faGhost} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faGhost);\n\nclass App extends Component {\n\n    render() {\n        let d = new Date();\n        let weekday = [];\n\n        weekday = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday',\n            'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n        let i = 1;\n\n        return (\n            <div className=\"App\">\n                <Provider store={store}>\n                    <div>\n                        <City/>\n                        <Weather/>\n                        <HourWeather/>\n                        <DayWeather text={weekday[d.getDay() + i * 1]} icon={8}/>\n                        <DayWeather text={weekday[d.getDay() + i * 2]} icon={16}/>\n                        <DayWeather text={weekday[d.getDay() + i * 3]} icon={24}/>\n                        <DayWeather text={weekday[d.getDay() + i * 4]} icon={32}/>\n                    </div>\n                </Provider>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}